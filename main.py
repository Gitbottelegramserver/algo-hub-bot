import asyncio
import threading
import os
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
from app.handlers.start import router

from aiohttp import web

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(router)

# –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
async def fake_web_server():
    async def handle(request):
        return web.Response(text="OK")
    app = web.Application()
    app.router.add_get('/', handle)
    port = int(os.environ.get("PORT", 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# üîµ Heartbeat –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
async def heartbeat():
    while True:
        await asyncio.sleep(300)  # –ø—Ä–æ—Å—Ç–æ –∂–¥—ë—Ç 5 –º–∏–Ω—É—Ç
#SelfPING
async def self_ping():
    url = os.getenv(SELF_URL, "https://algo-hub-bot.onrender.com")  # –ú—ã –±–µ—Ä–µ–º URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not url:
        print("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SELF_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return

    session = aiohttp.ClientSession()
    while True:
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    print("‚úÖ Self-ping —É—Å–ø–µ—à–Ω—ã–π!")
                else:
                    print(f"‚ö†Ô∏è Self-ping –æ—à–∏–±–∫–∞: {response.status}")
        except Exception as e:
            print(f"‚ùå Self-ping –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

async def main():
    asyncio.create_task(fake_web_server())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    asyncio.create_task(heartbeat())
    asyncio.create_task(self_ping())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
